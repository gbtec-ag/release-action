name: "Release project"
inputs:
  repository:
    description: 'Repository to release'
    required: true
  source-branch:
    description: 'Source branch to release'
    required: true
  gh-runner-token:
    description: 'Token to clone GitHub repositories'
    required: true
  github-token:
    description: 'Automatic GitHub Workflow token'
    required: true
  maven-repository-user:
    description: 'User to access maven-repository artifacts'
    required: false
  maven-repository-token:
    description: 'Token to access maven-repository artifacts'
    required: false
  maven-repository-url:
    description: 'Url to access maven-repository artifacts'
    required: false
  jira-user:
    description: 'User to access Jira API'
    required: true
  jira-token:
    description: 'Token to access Jira API'
    required: true
  quay-api-token:
    description: 'Application token to access the Quay API'
    required: true
  slack-token:
    description: 'Token to access Slack API'
    required: true
  quay-retry-max:
    description: 'Maximum number of retries to check for the Quay artifact'
    required: false
  quay-retry-wait-in-seconds:
    description: 'Seconds to wait between retries when checking for Quay artifacts'
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout the target repository
      uses: actions/checkout@v3
      with:
        token: ${{ inputs.github-token }}
        repository: gbtec-ag/${{ inputs.repository }}
        path: ${{ inputs.repository }}
        fetch-depth: 0

    - name: Checkout git-repository-runner
      uses: actions/checkout@v3
      with: 
        token: ${{ inputs.gh-runner-token }}
        repository: gbtec-ag/git-repository-runner
        # FIXME: we want to change that to master later
        ref: refs/heads/feat/DES-2160
        path: git-repository-runner

    - name: Check for Maven project
      id: check-maven
      run: |
        [[ -f ${{ inputs.repository }}/pom.xml ]] && is_maven=true || is_maven=false
        echo "is_maven=${is_maven}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Install Java and Maven
      if: steps.check-maven.outputs.is_maven == 'true'
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Define Maven Cache
      if: steps.check-maven.outputs.is_maven == 'true'
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: maven-release

    - name: Create Maven settings
      if: steps.check-maven.outputs.is_maven == 'true'
      uses: whelk-io/maven-settings-xml-action@v21
      with:
        # We need the indirection of the environment vars so that the credentials never get written to settings.xml on harddisk.
        servers: '[{ "id": "central", "username": "${env.MAVEN_REPOSITORY_USER}", "password": "${env.MAVEN_REPOSITORY_TOKEN}" }]'
        mirrors: '[{ "id": "central", "mirrorOf": "central", "url": "${env.MAVEN_REPOSITORY_URL}" }]'
        repositories: '[{ "id": "central",  "url": "${env.MAVEN_REPOSITORY_URL}", "snapshots": { "enabled": "true" } }]'

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        cd git-repository-runner
        pip install -r requirements.txt
      shell: bash

    # Note: GITHUB_TOKEN is already reserved by GitHub Actions.
    # GITHUB_TOKEN accesses inputs.repository only (the one starting the GitHub Action Workflow).
    # Therefore, GH_RUNNER_TOKEN is used to access other repositories.
    # Remember to give appropriate rights to the user hosting the GH_RUNNER_TOKEN.
    - name: Run release workflow
      env:
        REPO_HELPER_SERVICES: "${{ inputs.repository }}"
        GH_RUNNER_TOKEN: "${{ inputs.gh-runner-token }}"
        GITHUB_TOKEN: "${{ inputs.github-token }}"
        JIRA_USER: "${{ inputs.jira-user }}"
        JIRA_TOKEN: "${{ inputs.jira-token }}"
        QUAY_API_TOKEN: "${{ inputs.quay-api-token }}"
        QUAY_RETRY_MAX: ${{ inputs.quay-retry-max }}
        QUAY_RETRY_WAIT_IN_SECONDS: ${{ inputs.quay-retry-wait-in-seconds }}
        SLACK_TOKEN: "${{ inputs.slack-token }}"
      run: |
        export REPO_HELPER_BASEDIR="${GITHUB_WORKSPACE}"
        ./git-repository-runner/runner.py CreateRelease "${{ inputs.source-branch }}"
      shell: bash
